akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    
    serializers {
      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
      kryo="com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "akka.cluster.ClusterMessage" = akka-cluster
      "com.msg.base.model.OkoMessage" = kryo
    }
    
    router.type-mapping {
      adaptive-pool = "akka.cluster.routing.AdaptiveLoadBalancingPool"
      adaptive-group = "akka.cluster.routing.AdaptiveLoadBalancingGroup"
    }
    default-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      fork-join-executor {
        parallelism-min = 16
        parallelism-factor = 3.0
        parallelism-max = 64
      }
      thread-pool-executor {
        keep-alive-time = 60s
        core-pool-size-min = 8
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 8
        max-pool-size-factor  = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"
        allow-core-timeout = on
      }
      shutdown-timeout = 1s
      throughput = 100
      throughput-deadline-time = 0ms
      attempt-teamwork = on
      mailbox-requirement = ""
    }
    
    kryo  {   
	    type = "graph"  
	    idstrategy = "incremental"
	    serializer-pool-size = 16
	    buffer-size = 4096  
		max-buffer-size = -1
	    use-manifests = false
	    compression = off
	    implicit-registration-logging = false 
	    kryo-trace = false 
	    mappings {  
	        "com.msg.base.model.OkoMessage" = 20,  
	        "com.msg.base.model.Sub" = 21,
	        "com.msg.base.model.SubOk" = 22,
	        "com.msg.base.model.Msg" =  23,
	        "com.msg.base.model.ReplySubNum" = 24,
	        "com.msg.base.model.Error" = 25,
	        "com.msg.base.model.UnSub" = 26,
	        "com.msg.base.model.DeadMsg" = 27,
	        "com.msg.base.model.Connect" = 28,
	        "com.msg.base.model.ListMsg" = 29,
	        "com.msg.base.model.Data" = 30,
	        "com.msg.base.model.MData" = 31,
	        "com.msg.base.model.History" = 32,
	        "com.msg.base.model.VisitMsg" = 33
	    }
	}
  }

  remote {
    log-remote-lifecycle-events = off
    transport-failure-detector {
       acceptable-heartbeat-pause = 200 s
    }
    watch-failure-detector {
       implementation-class = "akka.remote.PhiAccrualFailureDetector"
       threshold = 10.0
       heartbeat-interval = 1 s
       max-sample-size = 200
       min-std-deviation = 100 ms
       acceptable-heartbeat-pause = 10 s
       unreachable-nodes-reaper-interval = 1s
       expected-response-after = 3 s
    }
    retry-gate-closed-for = 3 s      
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
      send-buffer-size = 2560000b
      receive-buffer-size = 2560000b
      maximum-frame-size = 52428800b
      backlog = 4096
      tcp-nodelay = on
      tcp-keepalive = on
      tcp-reuse-addr = off-for-windows
      connection-timeout = 10 s
      
      server-socket-worker-pool {
        pool-size-min = 20
        pool-size-factor = 2.0
        pool-size-max = 50
      }
      client-socket-worker-pool {
        pool-size-min = 20
        pool-size-factor = 2.0
        pool-size-max = 50
      }
    }
    default-remote-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      fork-join-executor {
        parallelism-min = 12
        parallelism-max = 24
      }
    }
  }
 
 cluster {
    gossip-interval = 1 s
    gossip-time-to-live = 2 s
    leader-actions-interval = 1 s
    retry-unsuccessful-join-after = 5 s
    auto-down-unreachable-after = 10 s
    roles=["MsgRegion"]
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      heartbeat-interval = 1 s
      threshold = 6.0
      max-sample-size = 1000
      min-std-deviation = 100 ms
      acceptable-heartbeat-pause = 30 s
      monitored-by-nr-of-members = 5
      expected-response-after = 5 s
    } 
  }
}

akka.contrib.cluster.sharding {
  guardian-name = "ExRegion"
  coordinator-failure-backoff = 5 s
  shardingRole = "MsgRegion"  
  vistorRole="vistorRole"
  mod-num = 500
  retry-interval = 2 s
  buffer-size = 1000000
  handoff-timeout = 10 s
  rebalance-interval = 10 s
  snapshot-interval = 3600 s
  least-shard-allocation-strategy {
    rebalance-threshold = 10
    max-simultaneous-rebalance = 3
  }
}

akka {
  extensions = ["akka.contrib.persistence.mongodb.MongoPersistenceExtension"]
  persistence {
    journal {
      plugin = "akka-contrib-mongodb-persistence-journal"
    }    
    snapshot-store{
      plugin = "akka-contrib-mongodb-persistence-snapshot"
      # snapshot period, defalt 60 m
      period = 60
    }
  }
}

akka {
  contrib {
    persistence {
      mongodb {
        mongo {
          urls = ["127.0.0.1:27017"]
          db = "msg-center"
          journal-collection = "data_journal"
          journal-index = "data_journal_index"
          journal-write-concern = "Acknowledged"
          snaps-collection = "data_snaps"
          snaps-index = "data_snaps_index"
          snaps-write-concern = "Acknowledged"
          breaker {
            maxTries = 5
            timeout {
              call = 10s
              reset = 5s
            }
          }
        }
      }
    }
  }
}

akka-contrib-persistence-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 2
    core-pool-size-factor = 3.0
    core-pool-size-max = 10
  }
  throughput = 100
}

akka {
  extensions = ["com.msg.push.seed.cluster.ClusterDiscovery"]
  cluster {
    discovery {
      etcd {
        host = 127.0.0.1
        port = 4001
        path = /akka
        timeouts {
          etcdConnection = 1 second

          # Timeout for HTTP requests to etcd server
          etcdRequest = 3 seconds

          # Time to wait before retyring failed etcd operations
          etcdRetry = 10 seconds

          # Timeout for waiting for seed nodes to be published after losing leader election
          # Election will be retired after this time passes
          seedsFetch = 60 seconds

          # Timeout for attempting to join the cluster using seed node addresses fetched from
          # etcd. If none of the seeds can be contacted during specified time, election will
          # be retried.
          seedsJoin = 60 seconds

          # TTL for leader entry in etcd. Leader will attempt to refresh twice during that period
          leaderEntry = 60 seconds
        }
      }
    }
  }
}

region{
    http{
        http_output_ip="0.0.0.0"
        http_output_port=7000
    }
 }